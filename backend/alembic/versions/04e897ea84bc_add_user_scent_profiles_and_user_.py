"""Add user scent profiles and user fragrances tables

Revision ID: 04e897ea84bc
Revises: 4c7bdccbc510
Create Date: 2025-10-17 00:59:04.059043

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '04e897ea84bc'
down_revision: Union[str, Sequence[str], None] = '4c7bdccbc510'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('brands',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Unique brand identifier'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Brand name'),
    sa.Column('country', sa.String(length=100), nullable=True, comment='Country of origin'),
    sa.Column('website', sa.String(length=255), nullable=True, comment='Official website URL'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Brand creation timestamp'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('fragrance_families',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Unique family identifier'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Fragrance family name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Family description'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Family creation timestamp'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user_scent_profiles',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User this profile belongs to'),
    sa.Column('liked_notes', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="Notes user manually selected: ['vanilla', 'bergamot', 'rose']"),
    sa.Column('liked_accords', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="Accords user manually selected: ['fresh', 'woody', 'citrus']"),
    sa.Column('onboarding_complete', sa.Boolean(), nullable=False, comment='Has user completed full onboarding'),
    sa.Column('onboarding_complete_at', sa.DateTime(timezone=True), nullable=True, comment='When they finished onboarding'),
    sa.Column('top_notes_from_ratings', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="Notes aggregated from their actual ratings: {'vanilla': 8, 'rose': 5}"),
    sa.Column('top_accords_from_ratings', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="Accords aggregated from their actual ratings: {'fresh': 7}"),
    sa.Column('profile_last_computed_at', sa.DateTime(timezone=True), nullable=True, comment='When rating-based aggregates were last computed'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    with op.batch_alter_table('user_scent_profiles', schema=None) as batch_op:
        batch_op.create_index('idx_user_fragrance_profiles_onboarding', ['onboarding_complete'], unique=False)

    op.create_table('fragrance_scraping_log',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Unique log entry identifier'),
    sa.Column('fragrance_id', sa.UUID(), nullable=False, comment='Reference to fragrance'),
    sa.Column('source_site', sa.String(length=50), nullable=False, comment='Source website name'),
    sa.Column('source_url', sa.String(length=500), nullable=True, comment='Source URL'),
    sa.Column('external_id', sa.String(length=255), nullable=True, comment='External fragrance ID'),
    sa.Column('scraped_successfully', sa.Boolean(), nullable=False, comment='Whether scraping was successful'),
    sa.Column('scrape_error_message', sa.Text(), nullable=True, comment='Error message if scraping failed'),
    sa.Column('reviews_scraped', sa.Integer(), nullable=False, comment='Number of reviews scraped'),
    sa.Column('last_scrape_attempt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Last scrape attempt timestamp'),
    sa.ForeignKeyConstraint(['fragrance_id'], ['fragrances.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('fragrance_scraping_log', schema=None) as batch_op:
        batch_op.create_index('idx_scraping_log_fragrance', ['fragrance_id'], unique=False)
        batch_op.create_index('idx_scraping_log_source', ['source_site'], unique=False)
        batch_op.create_index('idx_scraping_log_success', ['scraped_successfully'], unique=False)
        batch_op.create_index('uq_scraping_log_fragrance_source', ['fragrance_id', 'source_site'], unique=True)

    op.create_table('scraped_reviews',
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique review identifier'),
    sa.Column('fragrance_id', sa.UUID(), nullable=False, comment='Reference to fragrance'),
    sa.Column('rating', sa.Integer(), nullable=True, comment='Rating 1-5 scale'),
    sa.Column('review_text', sa.Text(), nullable=True, comment='Review text content'),
    sa.Column('review_title', sa.String(length=255), nullable=True, comment='Review title'),
    sa.Column('longevity', sa.Integer(), nullable=True, comment='Longevity rating 1-10'),
    sa.Column('sillage', sa.Integer(), nullable=True, comment='Sillage rating 1-10'),
    sa.Column('season', sa.String(length=50), nullable=True, comment='Season context'),
    sa.Column('occasion', sa.String(length=100), nullable=True, comment='Occasion context'),
    sa.Column('age_group', sa.String(length=50), nullable=True, comment='Age group of reviewer'),
    sa.Column('reviewer_username', sa.String(length=100), nullable=True, comment='Anonymized reviewer username'),
    sa.Column('reviewer_gender', sa.String(length=20), nullable=True, comment='Reviewer gender'),
    sa.Column('sentiment_score', sa.Numeric(precision=3, scale=2), nullable=True, comment='Sentiment score -1 to 1'),
    sa.Column('source_site', sa.String(length=50), nullable=True, comment='Source website'),
    sa.Column('source_url', sa.String(length=500), nullable=True, comment='Source URL'),
    sa.Column('external_review_id', sa.String(length=100), nullable=True, comment='External review ID for deduplication'),
    sa.Column('review_date', sa.DateTime(timezone=True), nullable=True, comment='Original review date'),
    sa.Column('scraped_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When review was scraped'),
    sa.ForeignKeyConstraint(['fragrance_id'], ['fragrances.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('scraped_reviews', schema=None) as batch_op:
        batch_op.create_index('idx_reviews_fragrance', ['fragrance_id'], unique=False)
        batch_op.create_index('idx_reviews_rating', ['rating'], unique=False)
        batch_op.create_index('idx_reviews_scraped', ['scraped_at'], unique=False)
        batch_op.create_index('idx_reviews_source', ['source_site'], unique=False)
        batch_op.create_index('uq_review_source_external', ['source_site', 'external_review_id'], unique=True)

    op.create_table('user_fragrances',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('fragrance_id', sa.UUID(), nullable=False),
    sa.Column('source', sa.String(length=50), nullable=True, comment="'onboarding', 'added_later', 'wishlist'"),
    sa.Column('owned', sa.Boolean(), nullable=True),
    sa.Column('added_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['fragrance_id'], ['fragrances.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'fragrance_id')
    )
    with op.batch_alter_table('fragrances', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.UUID(),
               server_default=None,
               comment='Unique fragrance identifier',
               existing_nullable=False)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=255),
               comment='Fragrance name',
               existing_nullable=False)
        batch_op.alter_column('brand_name',
               existing_type=sa.VARCHAR(length=255),
               comment='Brand name as text (for scraping flexibility)',
               existing_nullable=True)
        batch_op.alter_column('brand_id',
               existing_type=sa.INTEGER(),
               comment='Optional normalized brand reference',
               existing_nullable=True)
        batch_op.alter_column('release_year',
               existing_type=sa.INTEGER(),
               comment='Year of release',
               existing_nullable=True)
        batch_op.alter_column('gender',
               existing_type=sa.VARCHAR(length=20),
               comment='masculine, feminine, unisex',
               existing_nullable=True)
        batch_op.alter_column('concentration',
               existing_type=sa.VARCHAR(length=50),
               comment='EDT, EDP, Parfum, Cologne, etc.',
               existing_nullable=True)
        batch_op.alter_column('perfumer',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               server_default=None,
               comment='Perfumer/nose who created it',
               existing_nullable=True)
        batch_op.alter_column('top_notes',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               server_default=None,
               comment='Array of top note names',
               existing_nullable=True)
        batch_op.alter_column('middle_notes',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               server_default=None,
               comment='Array of middle note names',
               existing_nullable=True)
        batch_op.alter_column('base_notes',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               server_default=None,
               comment='Array of base note names',
               existing_nullable=True)
        batch_op.alter_column('main_accords',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               server_default=None,
               comment='Array of main scent categories',
               existing_nullable=True)
        batch_op.alter_column('average_rating',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               server_default=None,
               comment='Average user rating (0.00-5.00)',
               existing_nullable=False)
        batch_op.alter_column('total_ratings',
               existing_type=sa.INTEGER(),
               server_default=None,
               comment='Total number of ratings',
               existing_nullable=False)
        batch_op.alter_column('longevity_rating',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               comment='Average longevity rating',
               existing_nullable=True)
        batch_op.alter_column('sillage_rating',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               comment='Average sillage/projection rating',
               existing_nullable=True)
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               comment='Fragrance description',
               existing_nullable=True)
        batch_op.alter_column('image_url',
               existing_type=sa.VARCHAR(length=500),
               comment='Main product image URL',
               existing_nullable=True)
        batch_op.alter_column('discontinued',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               comment='Whether fragrance is discontinued',
               existing_nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Creation timestamp',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Last update timestamp',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('url',
               existing_type=sa.VARCHAR(length=500),
               comment='Fragrantica URL',
               existing_nullable=False)
        batch_op.create_foreign_key(None, 'brands', ['brand_id'], ['id'])

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('fragrances', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('url',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='Fragrantica URL',
               existing_nullable=False)
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Last update timestamp',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Creation timestamp',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('discontinued',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               comment=None,
               existing_comment='Whether fragrance is discontinued',
               existing_nullable=False)
        batch_op.alter_column('image_url',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='Main product image URL',
               existing_nullable=True)
        batch_op.alter_column('description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Fragrance description',
               existing_nullable=True)
        batch_op.alter_column('sillage_rating',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               comment=None,
               existing_comment='Average sillage/projection rating',
               existing_nullable=True)
        batch_op.alter_column('longevity_rating',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               comment=None,
               existing_comment='Average longevity rating',
               existing_nullable=True)
        batch_op.alter_column('total_ratings',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               comment=None,
               existing_comment='Total number of ratings',
               existing_nullable=False)
        batch_op.alter_column('average_rating',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               server_default=sa.text('0.00'),
               comment=None,
               existing_comment='Average user rating (0.00-5.00)',
               existing_nullable=False)
        batch_op.alter_column('main_accords',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               server_default=sa.text("'{}'::character varying[]"),
               comment=None,
               existing_comment='Array of main scent categories',
               existing_nullable=True)
        batch_op.alter_column('base_notes',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               server_default=sa.text("'{}'::character varying[]"),
               comment=None,
               existing_comment='Array of base note names',
               existing_nullable=True)
        batch_op.alter_column('middle_notes',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               server_default=sa.text("'{}'::character varying[]"),
               comment=None,
               existing_comment='Array of middle note names',
               existing_nullable=True)
        batch_op.alter_column('top_notes',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               server_default=sa.text("'{}'::character varying[]"),
               comment=None,
               existing_comment='Array of top note names',
               existing_nullable=True)
        batch_op.alter_column('perfumer',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               server_default=sa.text("'{}'::character varying[]"),
               comment=None,
               existing_comment='Perfumer/nose who created it',
               existing_nullable=True)
        batch_op.alter_column('concentration',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='EDT, EDP, Parfum, Cologne, etc.',
               existing_nullable=True)
        batch_op.alter_column('gender',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='masculine, feminine, unisex',
               existing_nullable=True)
        batch_op.alter_column('release_year',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Year of release',
               existing_nullable=True)
        batch_op.alter_column('brand_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Optional normalized brand reference',
               existing_nullable=True)
        batch_op.alter_column('brand_name',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Brand name as text (for scraping flexibility)',
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Fragrance name',
               existing_nullable=False)
        batch_op.alter_column('id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               comment=None,
               existing_comment='Unique fragrance identifier',
               existing_nullable=False)

    op.drop_table('user_fragrances')
    with op.batch_alter_table('scraped_reviews', schema=None) as batch_op:
        batch_op.drop_index('uq_review_source_external')
        batch_op.drop_index('idx_reviews_source')
        batch_op.drop_index('idx_reviews_scraped')
        batch_op.drop_index('idx_reviews_rating')
        batch_op.drop_index('idx_reviews_fragrance')

    op.drop_table('scraped_reviews')
    with op.batch_alter_table('fragrance_scraping_log', schema=None) as batch_op:
        batch_op.drop_index('uq_scraping_log_fragrance_source')
        batch_op.drop_index('idx_scraping_log_success')
        batch_op.drop_index('idx_scraping_log_source')
        batch_op.drop_index('idx_scraping_log_fragrance')

    op.drop_table('fragrance_scraping_log')
    with op.batch_alter_table('user_scent_profiles', schema=None) as batch_op:
        batch_op.drop_index('idx_user_fragrance_profiles_onboarding')

    op.drop_table('user_scent_profiles')
    op.drop_table('fragrance_families')
    op.drop_table('brands')
    # ### end Alembic commands ###
